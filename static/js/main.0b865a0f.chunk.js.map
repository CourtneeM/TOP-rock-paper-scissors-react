{"version":3,"sources":["components/Header.js","components/Gameplay.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","Gameplay","state","playerWins","computerWins","roundNumber","availableChoices","currentRoundChoices","playerChoice","computerChoice","newGame","setState","props","resetResults","enableChoices","handleClick","e","target","textContent","Math","floor","random","length","playMatch","this","checkForWin","gameResults","disableChoices","Array","from","document","querySelector","children","forEach","button","disabled","style","backgroundColor","className","id","onClick","Component","Results","fontWeight","didWin","App","gameOver","gameWon","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0b865a0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../styles/Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>Rock, Paper, Scissors</h1>\r\n      <p>Made with React!</p>\r\n    </header>\r\n  )\r\n}\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport \"../styles/Gameplay.css\";\r\n\r\nclass Gameplay extends Component {\r\n  state = {\r\n    playerWins: 0,\r\n    computerWins: 0,\r\n    roundNumber: 0,\r\n    availableChoices: ['Rock', 'Paper', 'Scissors'],\r\n    currentRoundChoices: {\r\n      playerChoice: \"\",\r\n      computerChoice: \"\"\r\n    }\r\n  }\r\n\r\n  playMatch() {\r\n    let playerChoice = this.state.currentRoundChoices.playerChoice;\r\n    let computerChoice = this.state.currentRoundChoices.computerChoice;\r\n    \r\n    const rockWinLose = () => {\r\n      if (playerChoice === 'Rock' && computerChoice === 'Scissors') {\r\n        this.setState({\r\n          playerWins: this.state.playerWins + 1\r\n        })\r\n      } else if (playerChoice === 'Rock' && computerChoice === 'Paper') {\r\n        this.setState({\r\n          computerWins: this.state.computerWins + 1\r\n        })\r\n      }\r\n    };\r\n\r\n    const paperWinLose = () => {\r\n      if (playerChoice === 'Paper' && computerChoice === 'Rock') {\r\n        this.setState({\r\n          playerWins: this.state.playerWins + 1\r\n        })\r\n      } else if (playerChoice === 'Paper' && computerChoice === 'Scissors') {\r\n        this.setState({\r\n          computerWins: this.state.computerWins + 1\r\n        })\r\n      }\r\n    }\r\n\r\n    const scissorsWinLose = () => {\r\n      if (playerChoice === 'Scissors' && computerChoice === 'Paper') {\r\n        this.setState({\r\n          playerWins: this.state.playerWins + 1\r\n        })\r\n      } else if (playerChoice === 'Scissors' && computerChoice === 'Rock') {\r\n        this.setState({\r\n          computerWins: this.state.computerWins + 1\r\n        })\r\n      }\r\n    }\r\n    \r\n    rockWinLose();\r\n    paperWinLose();\r\n    scissorsWinLose();\r\n  }\r\n\r\n  roundNumber() {\r\n    this.setState({\r\n      roundNumber: this.state.roundNumber + 1\r\n    }, () => {\r\n      this.props.roundNumber(this.state.roundNumber);\r\n      this.checkForWin();\r\n    });\r\n  }\r\n\r\n  checkForWin() {\r\n    if (this.state.roundNumber === 5) {\r\n      if (this.state.playerWins === this.state.computerWins) {\r\n        this.props.gameResults('tie');\r\n      } else if (this.state.playerWins > this.state.computerWins) {\r\n        this.props.gameResults(true);\r\n      } else {\r\n        this.props.gameResults(false);\r\n      }\r\n      this.disableChoices();\r\n    }\r\n  }\r\n\r\n  disableChoices() {\r\n    const selectionContainer = Array.from(document.querySelector('.selection-container').children);\r\n    selectionContainer.forEach((button) => {\r\n      button.disabled = true;\r\n      button.style.backgroundColor = \"gray\";\r\n    });\r\n  }\r\n\r\n  enableChoices() {\r\n    const selectionContainer = Array.from(document.querySelector('.selection-container').children);\r\n    selectionContainer.forEach((button) => {\r\n      button.disabled = false;\r\n      button.style.backgroundColor = \"mediumslateblue\";\r\n    });\r\n  }\r\n\r\n  newGame = () => {\r\n    this.setState({\r\n      playerWins: 0,\r\n      computerWins: 0,\r\n      roundNumber: 0\r\n    }, () => {\r\n      this.props.roundNumber(this.state.roundNumber);\r\n      this.props.resetResults();\r\n      this.enableChoices();\r\n    });\r\n  }\r\n\r\n  handleClick = (e) => {\r\n    this.setState({\r\n      currentRoundChoices: {\r\n        playerChoice: e.target.textContent,\r\n        computerChoice: this.state.availableChoices[Math.floor(Math.floor(Math.random(this.state.availableChoices.length) * this.state.availableChoices.length))]\r\n      }\r\n    }, () => {\r\n      this.props.playerChoice(this.state.currentRoundChoices.playerChoice);\r\n      this.props.computerChoice(this.state.currentRoundChoices.computerChoice);\r\n      this.roundNumber();\r\n      this.playMatch();\r\n    }); \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <p>Select of the moves below. Best out of 5 wins!</p>\r\n        <div className=\"selection-container\">\r\n          <button id=\"rock-btn\" onClick={this.handleClick}>Rock</button>\r\n          <button id=\"paper-btn\" onClick={this.handleClick}>Paper</button>\r\n          <button id=\"scissors-btn\" onClick={this.handleClick}>Scissors</button>\r\n        </div>\r\n        <button onClick={this.newGame}>New Game</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nGameplay.propTypes = {\r\n  playerChoice: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Gameplay;","import React, {Component} from 'react';\r\nimport '../styles/Results.css';\r\n\r\nclass Results extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"results-container\">\r\n        <p>Round Number: {this.props.roundNumber}</p>\r\n        <p>\r\n          Player choice:  {this.props.playerChoice} | Computer choice: {this.props.computerChoice}\r\n        </p>\r\n        <p style={{fontWeight: 'bold'}}>{ this.props.gameResults.didWin }</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\nexport default Results;","import React, { Component } from \"react\";\nimport Header from './components/Header';\nimport Gameplay from './components/Gameplay';\nimport Results from './components/Results';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.playerChoice.bind(this);\n    this.computerChoice.bind(this);\n  }\n\n  state = {\n    gameResults: {\n      gameOver: false,\n      didWin: \"\"\n    },\n    roundNumber: 0,\n    playerChoice: \"\",\n    computerChoice: \"\",\n    availableChoices: ['Rock', 'Paper', 'Scissors'],\n  }\n\n  gameResults = (gameWon) => {\n    let didWin = \"\";\n    if (gameWon === 'tie') {\n      didWin = \"It's a tie!\";\n    } else if (!gameWon) {\n      didWin = 'You lose!';\n    } else if (gameWon) {\n      didWin = \"You win!\";\n    }\n    this.setState({\n      gameResults: {\n        gameOver: true,\n        didWin\n      }\n    });\n  }\n\n  roundNumber = (roundNumber) => {\n    this.setState({\n      roundNumber\n    });\n  }\n\n  playerChoice = (playerChoice) => {\n    this.setState({\n      playerChoice\n    });\n  }\n\n  computerChoice = (computerChoice) => {\n    this.setState({\n      computerChoice\n    });\n  }\n\n  resetResults = () => {\n    this.setState({\n      gameResults: {\n        gameOver: false,\n        didWin: \"\"\n      }\n    });\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <Header />\n        <Gameplay playerChoice={this.playerChoice} computerChoice={this.computerChoice} gameResults={this.gameResults} roundNumber={this.roundNumber} resetResults={this.resetResults}/>\n        <Results playerChoice={this.state.playerChoice} computerChoice={this.state.computerChoice} roundNumber={this.state.roundNumber} gameResults={this.state.gameResults} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}